{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\adv-starting-project\\\\frontend\\\\src\\\\pages\\\\NewEventPage.js\";\nimport { json, redirect } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEventPage() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = NewEventPage;\nexport default NewEventPage;\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = await request.formData();\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\")\n  };\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"aplication/json\"\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"could not save data\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n\n  // }\n  // export async function action({ request, params }) {\n  //   try {\n  //     const data = await request.formData();\n\n  //     const eventData = {\n  //       title: data.get(\"title\"),\n  //       image: data.get(\"image\"),\n  //       date: data.get(\"date\"),\n  //       description: data.get(\"description\"),\n  //     };\n\n  //     const response = await fetch(\"http://localhost:8080/events\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       body: JSON.stringify(eventData),\n  //     });\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n\n  //   // if (!response.ok) {\n  //   //   throw json({ message: 'Could not save event.' }, { status: 500 });\n  //   // }\n\n  //   return redirect(\"/events\");\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","redirect","EventForm","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","message","status","$RefreshReg$"],"sources":["C:/Users/User/Desktop/adv-starting-project/frontend/src/pages/NewEventPage.js"],"sourcesContent":["import { json, redirect } from \"react-router-dom\";\r\nimport EventForm from \"../components/EventForm\";\r\n\r\nfunction NewEventPage() {\r\n \r\n  return <EventForm />;\r\n}\r\n\r\nexport default NewEventPage;\r\n\r\nexport async function action({request, params}) {\r\n\r\n    const data = await request.formData();\r\n\r\n    const eventData = {\r\n        title: data.get(\"title\"),\r\n        image: data.get(\"image\"),\r\n        date: data.get(\"date\"),\r\n        description: data.get(\"description\")\r\n    }\r\n\r\n    const response = await fetch(\"http://localhost:8080/events\",{\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"aplication/json\"\r\n        },\r\n        body: JSON.stringify(eventData)\r\n    })\r\n\r\n    if(!response.ok) {\r\n        throw json({message: \"could not save data\"}, {status: 500});\r\n    }\r\n\r\n    return redirect(\"/events\")\r\n\r\n// }\r\n// export async function action({ request, params }) {\r\n//   try {\r\n//     const data = await request.formData();\r\n\r\n//     const eventData = {\r\n//       title: data.get(\"title\"),\r\n//       image: data.get(\"image\"),\r\n//       date: data.get(\"date\"),\r\n//       description: data.get(\"description\"),\r\n//     };\r\n\r\n//     const response = await fetch(\"http://localhost:8080/events\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(eventData),\r\n//     });\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n\r\n//   // if (!response.ok) {\r\n//   //   throw json({ message: 'Could not save event.' }, { status: 500 });\r\n//   // }\r\n\r\n//   return redirect(\"/events\");\r\n}\r\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,YAAYA,CAAA,EAAG;EAEtB,oBAAOD,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACtB;AAACC,EAAA,GAHQL,YAAY;AAKrB,eAAeA,YAAY;AAE3B,OAAO,eAAeM,MAAMA,CAAAC,IAAA,EAAoB;EAAA,IAAnB;IAACC,OAAO;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAE1C,MAAMG,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,EAAE;EAErC,MAAMC,SAAS,GAAG;IACdC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACvC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAC;IACxDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAClC,CAAC,CAAC;EAEF,IAAG,CAACM,QAAQ,CAACO,EAAE,EAAE;IACb,MAAM9B,IAAI,CAAC;MAAC+B,OAAO,EAAE;IAAqB,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EAC/D;EAEA,OAAO/B,QAAQ,CAAC,SAAS,CAAC;;EAE9B;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;AACA;AAAC,IAAAS,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}